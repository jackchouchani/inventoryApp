# TODO List - Évolutions Stratégiques de l'Application

Ce document détaille les prochaines fonctionnalités à implémenter pour enrichir l'application de gestion de stock pour les revendeurs de mode vintage.

---

## Thème 1 : De "Stats" à "Intelligence d'Affaires"

**Objectif :** Transformer la page de statistiques en un tableau de bord stratégique pour aider à la prise de décision.

### 1.1. Enrichissement du Schéma de Données

- [ ] **Table `items` :**
  - [ ] Ajouter une colonne `brand` (type `text`, nullable).
  - [ ] S'assurer que `created_at` et `sold_at` sont bien des `timestamptz` pour permettre des calculs de durée précis.

### 1.2. Évolution de la Logique Backend & Redux

- [ ] **Sélecteurs Redux (`src/store/selectors.ts`) :**
  - [ ] Créer un sélecteur `selectItemStats` qui calcule :
    - [ ] ROI par article : `(selling_price - purchase_price) / purchase_price`.
    - [ ] Temps de vente par article : `sold_at - created_at`.
  - [ ] Créer un sélecteur `selectAggregatedStats` qui utilise `selectItemStats` pour agréger les données :
    - [ ] ROI moyen et Marge moyenne par `brand`.
    - [ ] ROI moyen et Marge moyenne par `category_id`.
    - [ ] Temps de vente moyen par `brand` et par `category_id`.
    - [ ] Créer une liste de "Stock Dormant" (`stale_stock`): items non vendus (`status = 'available'`) dont `created_at` est plus vieux que X jours (ex: 90 jours).
- [ ] **Hooks Optimisés (`src/hooks/useOptimizedSelectors.ts`) :**
  - [ ] Créer un hook `useAdvancedDashboardData` qui expose les données de `selectAggregatedStats`.
  - [ ] Ajouter des paramètres de filtrage à ce hook (ex: `dateRange: { from: Date, to: Date }`).

### 1.3. Mise à Jour de l'Interface Utilisateur

- [ ] **Page `app/(stack)/stats.tsx` :**
  - [ ] Renommer la page en "Tableau de Bord" ou "Analyse".
  - [ ] Ajouter un sélecteur de période (Cette semaine, Ce mois, Ce trimestre, Année, Personnalisé).
  - [ ] **Nouvelle section : "Performance par Marque"**
    - [ ] Tableau affichant : Marque | Articles vendus | ROI moyen | Marge moyenne | Temps de vente moyen.
    - [ ] Ajouter la possibilité de trier les colonnes.
  - [ ] **Nouvelle section : "Performance par Catégorie"**
    - [ ] Tableau similaire pour les catégories.
  - [ ] **Nouveau composant : "Graphique Croisé Interactif"**
    - [ ] Utiliser une librairie de graphiques (si non déjà présente) pour créer un graphique à bulles :
      - Axe X : Temps de vente moyen.
      - Axe Y : ROI moyen.
      - Taille de la bulle : Nombre d'articles vendus.
      - Couleur : par Catégorie.
  - [ ] **Nouvelle section : "Alerte Stock Dormant"**
    - [ ] Afficher la liste des articles identifiés comme "dormants" avec un lien direct vers leur page d'édition.
- [ ] **Formulaire d'item (`src/components/ItemForm.tsx`) :**
  - [ ] Ajouter un champ de saisie pour la `brand`.

---

## Thème 2 : Gestion des "Sources" et Dépôts-Ventes

**Objectif :** Tracer l'origine des articles pour identifier les meilleures sources d'approvisionnement et gérer les dépôts-ventes.

### 2.1. Schéma de Données Supabase

- [x] **Nouvelle table `sources` :**
  - [x] `id`: `int8`, PK, auto-increment.
  - [x] `name`: `text`, not null.
  - [x] `type`: `text` (valeurs possibles : 'Marché', 'Boutique', 'En ligne', 'Particulier').
  - [x] `city`: `text`, nullable.
  - [x] `created_at`: `timestamptz`, default `now()`.
  - [x] `user_id`: `uuid`, FK vers `auth.users`.
- [x] **Table `items` :**
  - [x] Ajouter `source_id`: `int8`, nullable, FK vers `sources.id`.
  - [x] Ajouter `is_consignment`: `boolean`, default `false`.
  - [x] Ajouter `consignor_name`: `text`, nullable.
  - [x] Ajouter `consignment_split_percentage`: `numeric(5, 2)`, nullable.

### 2.2. Couche de Données (Redux & Database)

- [x] **`src/database/database.ts` :**
  - [x] Ajouter les fonctions CRUD pour la table `sources`.
- [x] **Store Redux (`src/store/`) :**
  - [x] Créer `sourcesSlice.ts` et `sourcesThunks.ts` pour gérer l'état des sources.
  - [x] Mettre à jour `itemsThunks.ts` pour inclure les nouveaux champs (`source_id`, `is_consignment`, etc.) lors de la création/mise à jour d'items.
- [x] **Sélecteurs (`src/store/selectors.ts`) :**
  - [x] Créer un sélecteur `selectSourcePerformance` qui calcule le ROI moyen et la marge totale par `source_id`.
  - [x] Créer un sélecteur `selectConsignmentPayments` qui liste les articles vendus en dépôt-vente et calcule le montant à reverser (`selling_price * consignment_split_percentage / 100`).

### 2.3. Interface Utilisateur

- [x] **Nouvelle section de l'app : `app/sources/`**
  - [x] `index.tsx` : Liste des sources avec recherche et bouton "Ajouter".
  - [x] `add.tsx` : Formulaire de création de source.
  - [x] `[id]/index.tsx` : Page de détail d'une source, affichant ses stats de performance et la liste des articles qui en proviennent.
- [x] **Formulaire d'item (`src/components/ItemForm.tsx`) :**
  - [x] Ajouter un sélecteur pour choisir une `source`.
  - [x] Ajouter une case à cocher "Article en dépôt-vente".
  - [x] Si coché, afficher les champs pour le nom du déposant et le pourcentage.
- [x] **Tableau de Bord (`app/(stack)/stats.tsx`) :**
  - [x] Ajouter une section "Performance par Source".
  - [x] Ajouter une section "Paiements Dépôts-Ventes à effectuer".

---

## Thème 3 : Carte d'Inventaire Visuelle

**Objectif :** Offrir une représentation visuelle et interactive de l'inventaire au lieu de listes textuelles.

### 3.1. Pré-requis

- [ ] S'assurer que les entités `locations` et `containers` sont bien structurées et que la relation `container -> location` est solide.

### 3.2. Développement du Composant

- [ ] **Nouveau composant `src/components/InventoryMapView.tsx` :**
  - [ ] Le composant prendra en props les listes de `locations`, `containers`, et `items`.
  - [ ] **Layout principal :** Créer une grille ou un layout flexible qui représente l'espace de stockage.
  - [ ] **Représentation des `locations` :** Chaque `location` est une "zone" cliquable.
  - [ ] **Représentation des `containers` :** À l'intérieur d'une `location` active, afficher ses `containers` sous forme de rectangles.
- [ ] **Nouveau hook `useInventoryMapData` (`src/hooks/`) :**
  - [ ] Ce hook utilisera les sélecteurs Redux pour agréger les données nécessaires à la carte :
    - [ ] Nombre d'articles par `container` et par `location`.
    - [ ] Valeur totale (prix d'achat) par `container` et par `location`.
    - [ ] Âge moyen des articles par `container` et par `location`.
- [ ] **Intégration de la Data-visualisation :**
  - [ ] Afficher les données (nb articles, valeur) directement sur les éléments visuels.
  - [ ] **Implémenter la "Heatmap" :**
    - [ ] Créer une fonction qui mappe une valeur (ex: valeur du stock) à une couleur (ex: de bleu à rouge).
    - [ ] Appliquer cette couleur en fond des `containers` ou `locations`.
    - [ ] Ajouter un bouton/switch pour basculer entre les vues : "Heatmap de Valeur" et "Heatmap d'Ancienneté".

### 3.3. Intégration dans l'Application

- [ ] **Nouvelle page `app/(tabs)/map.tsx` (ou similaire) :**
  - [ ] Créer un nouvel onglet dans la navigation principale pour la carte.
  - [ ] Intégrer le composant `InventoryMapView`.
  - [ ] Rendre la carte interactive : un clic sur un conteneur navigue vers la page de détail de ce conteneur.

---

## Thème 4 : Gestion Granulaire des Permissions Utilisateurs

**Objectif :** Remplacer le système de rôles statiques par une interface d'administration permettant de gérer finement les droits de chaque utilisateur, permission par permission.

### 4.1. Évolution du Schéma de Données Supabase

- [ ] **Table `profiles` :**
  - [ ] Conserver la colonne `role` (`ADMIN`, `MANAGER`, `OPERATOR`) pour un contrôle d'accès de haut niveau (ex: seul un `ADMIN` peut accéder à la page de gestion des permissions).
  - [ ] **Ajouter une colonne `permissions` de type `jsonb`**. Cette colonne stockera un objet définissant les droits spécifiques de l'utilisateur.
    - **Structure de l'objet `permissions` :**
      ```json
      {
        "items": {
          "create": true,
          "update": true,
          "delete": false
        },
        "categories": {
          "create": true,
          "update": true,
          "delete": false
        },
        "containers": {
          "create": true,
          "update": true,
          "delete": false
        },
        "features": {
          "scanner": true,
          "locations": true,
          "sources": true,
          "invoices": false,
          "auditLog": false,
          "labels": true,
          "dashboard": true
        },
        "stats": {
          "viewPurchasePrice": true
        },
        "settings": {
          "canManageUsers": false
        }
      }
      ```
- [ ] **Simplifier la Row Level Security (RLS) :**
  - [ ] Supprimer les politiques RLS complexes basées sur les rôles.
  - [ ] Conserver des politiques simples : un utilisateur authentifié peut-il lire/écrire sur une table ? La logique fine sera gérée côté client.
- [ ] **Créer une fonction trigger `on_new_user` :**
  - [ ] Qui crée automatiquement un profil dans `profiles` pour chaque nouvel utilisateur dans `auth.users`.
  - [ ] Ce trigger assignera un rôle par défaut (`OPERATOR`) et un set de permissions initiales très restreintes.

### 4.2. Logique Applicative et Hooks

- [ ] **Contexte d'Authentification (`src/contexts/AuthContext.tsx`) :**
  - [ ] Au login, récupérer et stocker l'intégralité du profil utilisateur, incluant son `role` et son objet `permissions`, dans un état global (Redux ou Context).
- [ ] **Nouveau Hook `usePermissions()` (`src/hooks/`) :**
  - [ ] Créer un hook `usePermissions` qui facilite la vérification des droits.
  - [ ] Le hook exposera une fonction `can(permission: string)`:
    - `permissions.can('items.create')` -> `true`
    - `permissions.can('features.auditLog')` -> `false`
  - [ ] Il retournera aussi l'objet de permissions complet si nécessaire.
- [ ] **Thunks Redux / Services :**
  - [ ] Créer une fonction `updateUserPermissions(userId, newPermissions)` dans `database.ts` et un thunk associé pour permettre aux admins de sauvegarder les modifications.

### 4.3. Interface d'Administration des Permissions

- [ ] **Nouvelle Page Admin (`app/(stack)/admin/permissions.tsx`) :**
  - [ ] Sécuriser l'accès à cette page uniquement pour les utilisateurs avec le rôle `ADMIN`.
  - [ ] **Partie 1 : Liste des Utilisateurs**
    - [ ] Afficher la liste de tous les utilisateurs avec leur email et leur rôle.
    - [ ] Ajouter un bouton "Gérer les permissions" à côté de chaque utilisateur.
  - [ ] **Partie 2 : Panneau de Permissions**
    - [ ] Au clic, afficher une modale ou une nouvelle vue avec les permissions de l'utilisateur sélectionné.
    - [ ] Organiser les permissions par sections claires (Gestion des Articles, Fonctionnalités, etc.).
    - [ ] **Utiliser des composants `Switch` (boutons on/off) pour chaque permission.**
    - [ ] **Section "Articles" :**
      - [ ] `[Switch]` Créer
      - [ ] `[Switch]` Modifier
      - [ ] `[Switch]` Supprimer
    - [ ] **Section "Catégories" :** (idem)
    - [ ] **Section "Contenants" :** (idem)
    - [ ] **Section "Fonctionnalités" :**
      - [ ] `[Switch]` Accès au Scanner
      - [ ] `[Switch]` Accès aux Emplacements
      - [ ] `[Switch]` Accès aux Sources
      - [ ] `[Switch]` Accès aux Factures
      - [ ] `[Switch]` Accès au Journal d'audit
      - [ ] `[Switch]` Accès aux Étiquettes
      - [ ] `[Switch]` Accès au Tableau de Bord
    - [ ] **Section "Données Sensibles" :**
      - [ ] `[Switch]` Voir le prix d'achat
    - [ ] **Section "Administration" :**
      - [ ] `[Switch]` Peut gérer les utilisateurs (donne accès à cette page)
  - [ ] La modification d'un switch doit immédiatement appeler le thunk pour mettre à jour le profil de l'utilisateur.

### 4.4. Adaptation de l'UI Existante

- [ ] **Intégrer `usePermissions` dans toute l'application :**
  - [ ] Remplacer les anciennes vérifications de `useUserRole()` par `usePermissions()`.
  - [ ] **Exemples :**
    - [ ] **Boutons :**
      ```tsx
      const permissions = usePermissions();
      {permissions.can('items.delete') && <Button title="Supprimer" />}
      ```
    - [ ] **Champs de formulaire :**
      ```tsx
      <TextInput editable={permissions.can('items.update')} />
      ```
    - [ ] **Accès aux pages :** Dans les layouts de navigation, vérifier les permissions pour masquer des onglets ou des stacks entiers.
      ```tsx
      // Dans (tabs)/_layout.tsx
      <Tabs.Screen
        name="scan"
        options={{
          title: 'Scanner',
          href: permissions.can('features.scanner') ? '/scan' : null,
        }}
      />
      ```

---

## Thème 5 : Historique et Traçabilité (Audit Log)

**Objectif :** Conserver un historique complet des actions sur chaque article pour une traçabilité parfaite.

### 5.1. Schéma de Données Supabase


- [x] **Nouvelle table `item_history` :**
  - [x] `id`: `int8`, PK, auto-increment.
  - [x] `item_id`: `int8`, FK vers `items.id`.
  - [x] `user_id`: `uuid`, FK vers `auth.users.id`.
  - [x] `action`: `text` (ex: 'CREATED', 'STATUS_CHANGED', 'PRICE_UPDATED', 'MOVED').
  - [x] `details`: `jsonb`, pour stocker les changements (ex: `{ "from": "available", "to": "sold" }`).
  - [x] `created_at`: `timestamptz`, default `now()`.

### 5.2. Implémentation Backend

- [x] **Supabase Database Functions (Triggers) :**
  - [x] Créer une fonction `log_item_change()` qui insère une nouvelle ligne dans `item_history`.
  - [x] Attacher cette fonction comme un trigger `AFTER UPDATE` sur la table `items`.
  - [x] Créer un trigger similaire `AFTER INSERT` pour l'action 'CREATED'.

### 5.3. Interface Utilisateur

- [x] **Page de détail de l'article (`app/item/[id]/info.tsx`) :**
  - [x] Ajouter un nouvel onglet "Historique".
  - [x] Dans cet onglet, fetcher et afficher l'historique de l'article depuis la table `item_history`.
  - [x] Formater chaque entrée de manière lisible : "Le 30/06/2025, **Utilisateur A** a changé le statut de **disponible** à **vendu**."

---

## Thème 6 : Export et Intégration

**Objectif :** Permettre aux utilisateurs d'exporter des données pour des besoins comptables ou d'analyse externe.

### 6.1. Création d'un Worker Cloudflare pour la Génération de Fichiers

- [x] **Nouveau projet Worker (`report-generator-worker`) :**
  - [x] Mettre en place un nouveau worker Cloudflare sur le modèle de `r2-invoice-worker`.
  - [x] Ajouter les dépendances nécessaires pour la génération de CSV (ex: `papaparse`) et de PDF (ex: `pdf-lib` ou un service d'API comme `Puppeteer`).
- [x] **Développer le Worker :**
  - [x] Créer un endpoint POST qui accepte un payload JSON (contenant les données à exporter et le format désiré : 'csv' ou 'pdf').
  - [x] **Logique CSV :** Convertir le JSON en une chaîne de caractères CSV.
  - [x] **Logique PDF :** Créer une mise en page simple pour un rapport d'inventaire (logo, titre, date, tableau de données).
  - [x] Le worker doit sauvegarder le fichier généré sur R2 et retourner une URL de téléchargement sécurisée et à durée de vie limitée.

### 6.2. Intégration dans l'Application Frontend

- [x] **Créer un service `ReportService.ts` (`src/services/`) :**
  - [x] Ce service contiendra une fonction `generateReport(data, format)` qui appelle le worker Cloudflare.
- [x] **Ajouter des boutons d'export dans l'UI :**
  - [x] **Page de Stock (`app/(tabs)/stock.tsx`) :**
    - [x] Ajouter un bouton "Exporter la vue en CSV".
    - [x] Ce bouton récupère les données actuellement filtrées, les envoie au `ReportService`, et déclenche le téléchargement du fichier via l'URL retournée.
  - [x] **Tableau de Bord (`app/(stack)/stats.tsx`) :**
    - [x] Ajouter un bouton "Exporter l'inventaire complet (PDF)".
    - [x] Ce bouton enverra la liste complète des articles au service pour générer un rapport PDF complet à la date du jour.
- [x] **Gestion de l'état de l'export :**
  - [x] Afficher une notification ou un indicateur de chargement pendant que le worker génère le fichier.
  - [x] Afficher un message de succès avec le lien de téléchargement, ou un message d'erreur en cas de problème.

---

## Thème 7 : Fiche Client (Mini-CRM)

**Objectif :** Suivre les achats des clients pour identifier les clients VIP et personnaliser la relation commerciale.

### 7.1. Schéma de Données Supabase

- [ ] **Nouvelle table `clients` :**
  - [ ] `id`: `int8`, PK, auto-increment.
  - [ ] `name`: `text`, not null.
  - [ ] `contact`: `text`, nullable (email ou @instagram).
  - [ ] `notes`: `text`, nullable.
  - [ ] `created_at`: `timestamptz`, default `now()`.
  - [ ] `user_id`: `uuid`, FK vers `auth.users`.
- [ ] **Table `items` :**
  - [ ] Ajouter `sold_to_client_id`: `int8`, nullable, FK vers `clients.id`.

### 7.2. Couche de Données (Redux & Database)

- [ ] **`src/database/database.ts` :**
  - [ ] Ajouter les fonctions CRUD pour la table `clients`.
- [ ] **Store Redux (`src/store/`) :**
  - [ ] Créer `clientsSlice.ts` et `clientsThunks.ts` pour gérer l'état des clients.
- [ ] **Sélecteurs (`src/store/selectors.ts`) :**
  - [ ] Créer un sélecteur `selectClientData` qui, pour chaque client, calcule :
    - [ ] Le nombre total d'articles achetés.
    - [ ] Le montant total dépensé.
    - [ ] La liste des articles achetés.
    - [ ] Les catégories et marques préférées (basé sur l'historique).

### 7.3. Interface Utilisateur

- [ ] **Nouvelle section de l'app : `app/clients/`**
  - [ ] `index.tsx` : Liste des clients, triable par nom, total dépensé ou nombre d'achats. Bouton "Ajouter".
  - [ ] `add.tsx` : Formulaire simple pour ajouter un nouveau client.
  - [ ] `[id]/index.tsx` : Page de détail d'un client, affichant :
    - [ ] Ses informations de contact et notes.
    - [ ] Ses statistiques (total dépensé, etc.).
    - [ ] La liste de ses achats passés.
    - [ ] Un résumé de ses préférences (marques/catégories favorites).
- [ ] **Processus de Vente :**
  - [ ] Lorsque l'on marque un article comme "vendu", proposer une modale/un champ pour l'associer à un client (soit en sélectionnant un client existant, soit en en créant un à la volée).

---

## Thème 8 : Générateur d'Étiquettes Personnalisable

**Objectif :** Permettre aux utilisateurs de créer et de personnaliser leurs propres modèles d'étiquettes, au lieu d'utiliser un design fixe.

### 8.1. Schéma de Données Supabase

- [ ] **Nouvelle table `label_templates` :**
  - [ ] `id`: `int8`, PK, auto-increment.
  - [ ] `name`: `text`, not null (ex: "Étiquette standard", "Étiquette soldes").
  - [ ] `width_mm`: `integer`, not null.
  - [ ] `height_mm`: `integer`, not null.
  - [ ] `config`: `jsonb`, not null. Stocke la structure de l'étiquette (positions, polices, etc.).
  - [ ] `user_id`: `uuid`, FK vers `auth.users`.

### 8.2. Développement de l'Éditeur d'Étiquettes

- [ ] **Recherche de Librairie :**
  - [ ] Évaluer des librairies de type "éditeur drag-and-drop" ou "canvas" pour React Native (ex: `react-native-canvas`, ou une vue web avec une librairie JS comme `fabric.js` ou `konva.js`).
- [ ] **Nouveau composant `LabelEditor.tsx` (`src/components/`) :**
  - [ ] **Canvas :** Afficher une surface de dessin qui représente l'étiquette, aux dimensions définies.
  - [ ] **Barre d'outils :**
    - [ ] Ajouter un champ de texte.
    - [ ] Ajouter une image (pour le logo).
    - [ ] Ajouter un QR code.
    - [ ] Ajouter une forme simple (ligne, rectangle).
  - [ ] **Inspecteur de propriétés :**
    - [ ] Quand un élément est sélectionné sur le canvas, afficher ses propriétés (taille, police, couleur, position) et permettre de les modifier.
  - [ ] **Gestion des données dynamiques :**
    - [ ] Permettre d'insérer des "placeholders" (champs de fusion) dans les champs de texte, comme `{{item.name}}`, `{{item.selling_price}}`, `{{item.qr_code}}`.
- [ ] **Logique de Sauvegarde :**
  - [ ] Le composant doit pouvoir exporter la configuration du layout en JSON (positions, styles, contenu des éléments) pour la sauvegarder dans la colonne `config` de la table `label_templates`.

### 8.3. Intégration dans l'Application

- [ ] **Nouvelle section `app/labels/templates/` :**
  - [ ] `index.tsx`: Liste des modèles d'étiquettes existants. Bouton "Créer un modèle".
  - [ ] `add.tsx`: Formulaire pour définir le nom et les dimensions du nouveau modèle, qui mène ensuite à l'éditeur.
  - [ ] `[id]/edit.tsx`: Page qui charge un modèle existant dans le `LabelEditor`.
- [ ] **Mise à jour de la page de prévisualisation (`app/labels/index.tsx`) :**
  - [ ] Au lieu d'un seul design, permettre à l'utilisateur de sélectionner les articles à étiqueter, PUIS de choisir le `modèle d'étiquette` à appliquer.
  - [ ] Le `LabelRenderer` (le composant qui affiche l'étiquette finale) devra lire la `config` JSON du modèle et les données de l'article pour générer l'étiquette finale en remplaçant les placeholders par les vraies données.
- [ ] **Améliorer la fonction d'impression :**
  - [ ] La fonction d'impression doit générer un PDF A4 en disposant les étiquettes générées dans une grille, en fonction de leurs dimensions, pour optimiser l'utilisation du papier.
---

## Thème 9 : Mise en Place d'une Stratégie de Tests Complète

**Objectif :** Assurer la robustesse, la fiabilité et la non-régression de l'application en intégrant une suite de tests complète. L'absence actuelle de tests représente un risque majeur pour la stabilité et l'évolution future du projet.

### 9.1. Philosophie et Stratégie de Test

- **Pyramide de Tests :** Adopter une approche équilibrée :
    - **Tests Unitaires (70%) :** Rapides et ciblés. Valider la logique des fonctions pures, des composants UI simples, des slices Redux et des services.
    - **Tests d'Intégration (20%) :** Valider la collaboration entre plusieurs unités. Ex: un formulaire qui dispatche une action Redux et met à jour le store.
    - **Tests End-to-End (E2E) (10%) :** Simuler des parcours utilisateurs complets. Ex: se connecter, ajouter un article, le vendre, et vérifier qu'il apparaît dans les stats.
- **Outils à Mettre en Place :**
    - **Framework de test :** `Jest` (déjà en place).
    - **Bibliothèque de test pour composants React Native :** `React Native Testing Library` (`@testing-library/react-native`) pour des tests orientés utilisateur.
    - **Mocking :** `Jest` pour mocker les modules et les fonctions (ex: `jest.mock`).
    - **Tests E2E :** `Detox` ou `Maestro` pour les tests sur simulateurs/appareils réels. `Cypress` pourrait être une option pour la version web.
    - **Couverture de code :** `Jest` fournit cette fonctionnalité nativement.

### 9.2. Plan d'Action Détaillé

#### Étape 1 : Configuration de l'Environnement de Test (Priorité Haute)

- [ ] **Installer et configurer React Native Testing Library.**
    - `npm install --save-dev @testing-library/react-native @testing-library/jest-native`
    - Mettre à jour `jest.setup.js` pour inclure les matchers de `@testing-library/jest-native`.
- [ ] **Configurer le mocking global.**
    - Mettre en place des mocks pour les dépendances externes communes (ex: `expo-router`, `react-native-safe-area-context`, Supabase client) dans `jest.setup.js`.
- [ ] **Définir un script `npm test` clair.**
    - `package.json` : `"test": "jest"`, `"test:watch": "jest --watch"`, `"test:coverage": "jest --coverage"`.
- [ ] **Objectif de couverture initial :** Viser un objectif réaliste de 30% de couverture pour commencer, puis augmenter progressivement.

#### Étape 2 : Tests Unitaires des Fonctions Critiques (Priorité Haute)

- [ ] **`src/utils/` :**
    - [ ] `qrCodeGenerator.ts` : Tester la génération, la validation de format et la gestion des collisions (en mockant la base de données).
    - [ ] `permissions.ts` : Tester la logique de vérification des permissions.
- [ ] **`src/database/` :**
    - [ ] Tester les fonctions de mapping `snake_case` vers `camelCase`.
- [ ] **`src/services/` :**
    - [ ] Tester la logique des services (ex: `imageService`) en mockant les appels externes (R2, Cloudflare workers).

#### Étape 3 : Tests du Store Redux (Priorité Haute)

- [ ] **Slices (`src/store/*Slice.ts`) :**
    - [ ] Pour chaque slice (`itemsSlice`, `categoriesSlice`, etc.), tester les reducers :
        - Vérifier l'état initial.
        - Vérifier que chaque action met à jour l'état correctement.
        - Tester les cas de `pending`, `fulfilled`, `rejected` pour les thunks.
- [ ] **Sélecteurs (`src/store/selectors.ts`) :**
    - [ ] Tester chaque sélecteur avec un état Redux mocké pour s'assurer qu'il extrait et transforme les données correctement.
    - [ ] Porter une attention particulière aux sélecteurs mémoïsés pour vérifier qu'ils ne recalculent pas inutilement.
- [ ] **Thunks (`src/store/*Thunks.ts`) :**
    - [ ] Tester les thunks en mockant les appels à la base de données (`database.ts`).
    - [ ] Vérifier que les bonnes actions sont dispatchées en fonction du succès ou de l'échec de l'appel asynchrone.

#### Étape 4 : Tests de Composants UI (Priorité Moyenne)

- [ ] **Composants de base (`src/components/`) :**
    - [ ] `Icon.tsx`, `Button.tsx`, `Input.tsx` : Tester qu'ils rendent correctement les props et gèrent les événements utilisateur (ex: `onPress`).
    - [ ] `ItemCard.tsx` : Tester l'affichage des données de l'item, le formatage des prix, et le déclenchement des callbacks.
    - [ ] `ItemForm.tsx` : Test plus complexe.
        - Remplir les champs.
        - Simuler la soumission.
        - Vérifier que la fonction de soumission est appelée avec les bonnes données.
        - Tester la validation des champs.
- [ ] **Composants de liste :**
    - [ ] `VirtualizedItemList.tsx` : Tester qu'il affiche une liste d'items et gère correctement les états vide et de chargement.

#### Étape 5 : Tests d'Intégration (Priorité Moyenne)

- [ ] **Écrans simples (`app/(tabs)/add.tsx`) :**
    - [ ] Mettre en place un test qui rend l'écran complet avec un store Redux mocké.
    - [ ] Simuler le remplissage du formulaire et la soumission.
    - [ ] Vérifier que le thunk `createItem` a été appelé.
- [ ] **Écrans d'affichage (`app/(tabs)/stock.tsx`) :**
    - [ ] Rendre l'écran avec un store pré-rempli.
    - [ ] Vérifier que la liste des articles s'affiche.
    - [ ] Simuler une recherche ou un filtre et vérifier que la liste se met à jour.
    - [ ] Simuler un clic sur un item et vérifier que la navigation est déclenchée (en mockant `expo-router`).

#### Étape 6 : Mise en Place des Tests E2E (Priorité Basse, à planifier)

- [ ] **Choisir et configurer l'outil E2E (ex: `Detox` pour mobile, `Cypress` pour web).**
- [ ] **Définir les scénarios critiques à tester :**
    - [ ] **Scénario 1 : Connexion** -> Tenter de se connecter avec des identifiants valides et invalides.
    - [ ] **Scénario 2 : Création d'un article** -> Se connecter, naviguer vers le formulaire d'ajout, remplir les champs, sauvegarder, et vérifier que l'article apparaît dans la liste de stock.
    - [ ] **Scénario 3 : Vente d'un article** -> Trouver un article, le marquer comme vendu, et vérifier que son statut change.
    - [ ] **Scénario 4 : Recherche et Filtre** -> Appliquer un filtre et une recherche sur la page de stock et vérifier que les résultats sont corrects.

### 9.3. Intégration Continue (CI)

- [ ] **Configurer un workflow GitHub Actions (ou autre CI).**
- [ ] Ajouter une étape qui exécute `npm test` à chaque `push` sur une branche ou `pull request`.
- [ ] (Optionnel) Ajouter une étape qui calcule la couverture de code et la publie (ex: via `Codecov`).
- [ ] Bloquer la fusion des `pull requests` si les tests échouent.
---

## Thème 10 : Internationalisation (i18n) et Support Multilingue

**Objectif :** Rendre l'application accessible à un public plus large en ajoutant le support pour plusieurs langues, en commençant par l'anglais. Cela améliorera l'expérience utilisateur et préparera l'application à une éventuelle expansion internationale.

### 10.1. Mise en Place de l'Infrastructure d'Internationalisation (i18n)

- [ ] **Choisir et installer la librairie i18n :**
  - [ ] Installer `i18next` et `react-i18next` : `npm install i18next react-i18next`.
- [ ] **Créer la structure des fichiers de traduction :**
  - [ ] Créer un nouveau dossier `src/locales/`.
  - [ ] À l'intérieur, créer des sous-dossiers pour chaque langue : `src/locales/en/` et `src/locales/fr/`.
  - [ ] Créer un fichier `translation.json` dans chaque dossier de langue.
    - `fr/translation.json` contiendra les textes en français (ex: `{ "settings": { "title": "Paramètres" } }`).
    - `en/translation.json` contiendra les textes en anglais (ex: `{ "settings": { "title": "Settings" } }`).
- [ ] **Configurer i18next :**
  - [ ] Créer un fichier de configuration `src/config/i18n.ts`.
  - [ ] Dans ce fichier, initialiser `i18next` avec les ressources (les fichiers `translation.json`), la langue par défaut (`fr`), et une langue de secours.
- [ ] **Intégrer le provider i18n :**
  - [ ] Dans le layout racine de l'application (`app/_layout.tsx`), wrapper l'application avec le `I18nextProvider`.

### 10.2. Traduction du Contenu de l'Application

- [ ] **Remplacer les chaînes de caractères statiques :**
  - [ ] Parcourir systématiquement tous les composants et toutes les pages.
  - [ ] Utiliser le hook `useTranslation` de `react-i18next` pour obtenir la fonction `t`.
  - [ ] Remplacer chaque texte hardcodé par une clé de traduction.
    - **Exemple :** Remplacer `<Text>Paramètres</Text>` par `<Text>{t('settings.title')}</Text>`.
- [ ] **Gérer les pluriels et les interpolations :**
  - [ ] Utiliser les fonctionnalités avancées de `i18next` pour gérer les cas complexes.
    - **Pluriels :** `t('items.count', { count: nbItems })` qui pourra donner "1 article" ou "5 articles".
    - **Interpolation :** `t('welcomeMessage', { user: userName })` pour afficher "Bienvenue, John".
- [ ] **Traduire les messages d'erreur et de succès :**
  - [ ] Ne pas oublier de traduire les textes affichés dans les Toasts, les alertes et les modales.

### 10.3. Interface de Sélection de la Langue

- [ ] **Créer un composant `LanguageSelector.tsx` :**
  - [ ] Sur le modèle du `ThemeToggle`, créer un sélecteur pour la langue.
  - [ ] Ce composant affichera les langues disponibles (ex: "Français", "English").
- [ ] **Ajouter le sélecteur à la page des paramètres :**
  - [ ] Intégrer le `LanguageSelector` dans la page `app/(stack)/settings.tsx`.
- [ ] **Implémenter le changement de langue :**
  - [ ] L'action de sélection appellera la fonction `i18n.changeLanguage('en')` pour changer la langue de toute l'application à la volée.

### 10.4. Persistance et Détection de la Langue

- [ ] **Sauvegarder le choix de l'utilisateur :**
  - [ ] Utiliser `AsyncStorage` pour sauvegarder la langue sélectionnée par l'utilisateur.
  - [ ] Au démarrage de l'application, lire cette valeur pour initialiser `i18next` avec la langue préférée de l'utilisateur.
- [ ] **Détecter la langue du système (optionnel mais recommandé) :**
  - [ ] Pour la première utilisation, détecter la langue du téléphone de l'utilisateur (`expo-localization`).
  - [ ] Si la langue du système est supportée (français ou anglais), l'utiliser comme langue par défaut. Sinon, revenir au français.