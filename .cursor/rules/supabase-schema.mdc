---
description: 
globs: 
alwaysApply: true
---
# Schéma Supabase – Guide de Référence

> **Référence :**

## Tables Principales

### Table `items`
- **Champs principaux** :
  - `id` (bigint, PK)
  - `name`, `description`
  - `purchase_price`, `selling_price` (numeric)
  - `status` (`available`, `sold`, `reserved`, `damaged`)
  - `qr_code` (text, unique)
  - `container_id`, `category_id`, `location_id` (FK)
  - `created_at`, `updated_at`, `sold_at`
  - `created_by`, `user_id` (uuid, FK)
  - `photo_storage_url` (text)
  - `deleted` (bool, soft delete)
- **Contraintes** :
  - FK vers `categories`, `containers`, `locations`, `auth.users`
  - Check sur `status`

### Table `categories`
- **Champs principaux** :
  - `id` (bigint, PK)
  - `name`, `description`, `icon`
  - `created_at`, `updated_at`
  - `deleted` (bool)
  - `user_id` (uuid, FK)
- **Contraintes** :
  - FK vers `auth.users`

### Table `containers`
- **Champs principaux** :
  - `id` (bigint, PK)
  - `number` (int), `name`, `description`, `qr_code`
  - `created_at`, `updated_at`
  - `deleted` (bool)
  - `user_id` (uuid, FK)
  - `location_id` (bigint, FK nullable)
- **Contraintes** :
  - FK vers `locations`, `auth.users`

### Table `locations`
- **Champs principaux** :
  - `id` (bigint, PK)
  - `name`, `address`, `description`, `qr_code`
  - `created_at`, `updated_at`
  - `deleted` (bool)
  - `user_id` (uuid, FK)
- **Contraintes** :
  - `qr_code` unique
  - FK vers `auth.users`

### Table `location_movements`
- **Champs principaux** :
  - `id` (bigint, PK)
  - `item_id` (bigint, FK)
  - `from_location_id`, `to_location_id` (bigint, FK)
  - `from_container_id`, `to_container_id` (bigint, FK)
  - `moved_at` (timestamp)
  - `user_id` (uuid, FK)
- **Contraintes** :
  - FK vers `items`, `locations`, `containers`, `auth.users`

### Table `audit_logs`
- **Champs principaux** :
  - `id` (bigint, PK)
  - `table_name`, `operation`, `record_id`, `changes` (jsonb)
  - `user_id` (uuid, FK)
  - `created_at` (timestamp)

## RLS (Row-Level Security) Policies

- **locations** :
  - SELECT : tout le monde (`deleted = false`)
  - INSERT/UPDATE/DELETE : seulement si `auth.uid() = user_id`
- **location_movements** :
  - SELECT : tout le monde
  - INSERT : système uniquement
- **categories/items** :
  - SELECT/INSERT/UPDATE/DELETE : tout utilisateur authentifié

## Fonctions Spécifiques

- **cleanup_unused_images** :
  - Supprime les images du bucket non référencées par un item
- **record_item_movement** :
  - Historise les mouvements d'items lors d'un changement de location/container
- **sync_item_to_algolia** :
  - Synchronise les items avec Algolia via HTTP POST
- **audit_log / audit_trigger_function** :
  - Log toutes les opérations (INSERT/UPDATE/DELETE) dans `audit_logs`
- **cleanup_audit_logs** :
  - Purge les logs de plus de 30 jours

## Contraintes et Bonnes Pratiques
- **Soft delete** : champ `deleted` sur toutes les entités principales
- **user_id** : traçabilité, jamais utilisé pour restreindre la lecture (voir règles d'accès)
- **qr_code** : unique pour containers, items, locations
- **Relations** : toutes les entités liées par FK, suppression en cascade ou `SET NULL` selon le cas

## Utilisation
- Toujours se référer à ce schéma pour la structure des entités, les relations et les contraintes lors de l'implémentation côté frontend ou lors de la rédaction de requêtes SQL/Supabase.

> Voir le fichier [supabase](mdc:supabase) pour le détail SQL complet.

# Database Schema Summary (Cursor Rule Format)

## **Table Definitions**

### **audit_logs**
```sql
CREATE TABLE public.audit_logs (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  table_name text NOT NULL,
  operation text NOT NULL,
  record_id bigint NOT NULL,
  changes jsonb NOT NULL,
  user_id uuid NULL,
  created_at timestamp with time zone NULL DEFAULT now(),
  CONSTRAINT audit_logs_pkey PRIMARY KEY (id),
  CONSTRAINT audit_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
```

### **categories**
```sql
CREATE TABLE public.categories (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name text NOT NULL,
  description text NULL,
  created_at timestamp with time zone NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now(),
  deleted boolean NULL DEFAULT false,
  user_id uuid NOT NULL,
  icon text NULL,
  CONSTRAINT categories_pkey PRIMARY KEY (id),
  CONSTRAINT categories_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
```

### **containers**
```sql
CREATE TABLE public.containers (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  number integer NOT NULL,
  name text NOT NULL,
  description text NULL,
  qr_code text NOT NULL,
  created_at timestamp with time zone NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now(),
  deleted boolean NULL DEFAULT false,
  user_id uuid NOT NULL,
  location_id bigint NULL,
  CONSTRAINT containers_pkey PRIMARY KEY (id),
  CONSTRAINT containers_location_id_fkey FOREIGN KEY (location_id) REFERENCES locations(id) ON DELETE SET NULL,
  CONSTRAINT containers_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
```

### **items**
```sql
CREATE TABLE public.items (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name text NOT NULL,
  description text NULL,
  purchase_price numeric(10,2) NOT NULL,
  selling_price numeric(10,2) NOT NULL,
  status text NOT NULL,
  qr_code text NOT NULL,
  container_id bigint NULL,
  category_id bigint NULL,
  created_at timestamp with time zone NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now(),
  sold_at timestamp with time zone NULL,
  created_by uuid NULL,
  deleted boolean NOT NULL DEFAULT false,
  user_id uuid NOT NULL,
  photo_storage_url text NULL,
  location_id bigint NULL,
  CONSTRAINT items_pkey PRIMARY KEY (id),
  CONSTRAINT items_category_id_fkey FOREIGN KEY (category_id) REFERENCES categories(id),
  CONSTRAINT items_container_id_fkey FOREIGN KEY (container_id) REFERENCES containers(id),
  CONSTRAINT items_location_id_fkey FOREIGN KEY (location_id) REFERENCES locations(id) ON DELETE SET NULL,
  CONSTRAINT items_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT items_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT check_status CHECK ((status = ANY (ARRAY['available'::text, 'sold'::text, 'reserved'::text, 'damaged'::text])))
);
```

### **locations**
```sql
CREATE TABLE public.locations (
  id bigserial NOT NULL,
  name text NOT NULL,
  address text NULL,
  description text NULL,
  qr_code text NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  deleted boolean NOT NULL DEFAULT false,
  user_id uuid NOT NULL,
  CONSTRAINT locations_pkey PRIMARY KEY (id),
  CONSTRAINT locations_qr_code_key UNIQUE (qr_code),
  CONSTRAINT locations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
```

### **location_movements**
```sql
CREATE TABLE public.location_movements (
  id bigserial NOT NULL,
  item_id bigint NULL,
  from_location_id bigint NULL,
  to_location_id bigint NULL,
  from_container_id bigint NULL,
  to_container_id bigint NULL,
  moved_at timestamp with time zone NOT NULL DEFAULT now(),
  user_id uuid NOT NULL,
  CONSTRAINT location_movements_pkey PRIMARY KEY (id),
  CONSTRAINT location_movements_from_location_id_fkey FOREIGN KEY (from_location_id) REFERENCES locations(id) ON DELETE SET NULL,
  CONSTRAINT location_movements_item_id_fkey FOREIGN KEY (item_id) REFERENCES items(id) ON DELETE CASCADE,
  CONSTRAINT location_movements_from_container_id_fkey FOREIGN KEY (from_container_id) REFERENCES containers(id) ON DELETE SET NULL,
  CONSTRAINT location_movements_to_container_id_fkey FOREIGN KEY (to_container_id) REFERENCES containers(id) ON DELETE SET NULL,
  CONSTRAINT location_movements_to_location_id_fkey FOREIGN KEY (to_location_id) REFERENCES locations(id) ON DELETE SET NULL,
  CONSTRAINT location_movements_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
```

## **RLS (Row-Level Security) Policies**

### **locations**
- **SELECT**: Viewable by everyone (`deleted = false`)
- **INSERT**: Users can insert if `auth.uid() = user_id`
- **UPDATE**: Users can update their own locations (`auth.uid() = user_id`)
- **DELETE**: Users can delete their own locations (`auth.uid() = user_id`)

### **location_movements**
- **SELECT**: Movement history viewable by everyone
- **INSERT**: System can insert movements (no restriction)

### **categories**
- **SELECT/INSERT/UPDATE/DELETE**: Enabled for all authenticated users (no further restriction)

### **items**
- **SELECT/INSERT/UPDATE/DELETE**: Enabled for all authenticated users (no further restriction)

## **Functions**

### **C Functions (Similarity & Trigram)**
- `set_limit()`: real
- `show_limit()`: real
- `show_trgm()`: text[]
- `similarity(text, text)`: real
- `similarity_op(text, text)`: boolean
- `word_similarity(text, text)`: real
- `word_similarity_op(text, text)`: boolean
- `word_similarity_commutator_op(text, text)`: boolean
- `similarity_dist(text, text)`: real
- `word_similarity_dist_op(text, text)`: real
- `word_similarity_dist_commutator_op(text, text)`: real
- `gtrgm_in(cstring)`: gtrgm
- `gtrgm_out(gtrgm)`: cstring
- `gtrgm_consistent(internal, text, smallint, oid, internal)`: boolean
- `gtrgm_distance(internal, text, smallint, oid, internal)`: double precision
- `gtrgm_compress(internal)`: internal
- `gtrgm_decompress(internal)`: internal
- `gtrgm_penalty(internal, internal, internal)`: internal
- `gtrgm_picksplit(internal, internal)`: internal
- `gtrgm_union(internal, internal)`: gtrgm
- `gtrgm_same(gtrgm, gtrgm, internal)`: internal
- `gin_extract_value_trgm(text, internal)`: internal
- `gin_extract_query_trgm(text, internal, smallint, internal, internal, internal, internal)`: internal
- `gin_trgm_consistent(internal, smallint, text, integer, internal, internal, internal, internal)`: boolean
- `gin_trgm_triconsistent(internal, smallint, text, integer, internal, internal, internal)`: char
- `strict_word_similarity(text, text)`: real
- `strict_word_similarity_op(text, text)`: boolean
- `strict_word_similarity_commutator_op(text, text)`: boolean
- `strict_word_similarity_dist_op(text, text)`: real
- `strict_word_similarity_dist_commutator_op(text, text)`: real

### **PL/pgSQL Functions**

#### **cleanup_unused_images**
```plpgsql
DELETE FROM storage.objects
WHERE bucket_id = 'images'
AND name NOT IN (
    SELECT photo_uri FROM items WHERE photo_uri IS NOT NULL
    UNION
    SELECT replace(photo_uri, 'full_', 'thumb_') FROM items WHERE photo_uri IS NOT NULL
);
```

#### **record_item_movement**
```plpgsql
IF (NEW.location_id IS DISTINCT FROM OLD.location_id) OR
   (NEW.container_id IS DISTINCT FROM OLD.container_id) THEN
    INSERT INTO public.location_movements (
        item_id,
        from_location_id,
        to_location_id,
        from_container_id,
        to_container_id,
        user_id
    ) VALUES (
        NEW.id,
        OLD.location_id,
        NEW.location_id,
        OLD.container_id,
        NEW.container_id,
        NEW.user_id
    );
END IF;
RETURN NEW;
```

#### **sync_item_to_algolia**
```plpgsql
-- Fonction complète de synchronisation avec Algolia
-- Construit un payload JSON avec l'opération, la table, l'enregistrement
-- Envoie une requête POST à un point de terminaison distant
```

#### **audit_log**
```plpgsql
-- Fonction de logging des audits
-- Gère les opérations INSERT, UPDATE, DELETE
-- Insère dans la table audit_logs avec détails de l'opération
```

#### **audit_trigger_function**
```plpgsql
-- Fonction trigger pour l'audit automatique
-- Capture toutes les opérations sur les tables
-- Insère les détails dans audit_logs
```

#### **cleanup_audit_logs**
```plpgsql
-- Supprime les logs d'audit de plus de 30 jours
```

## Détails Techniques Complémentaires

### Contraintes Générales
- Toutes les tables ont un champ `user_id` pour la traçabilité
- Soft delete via champ `deleted` 
- Relations par clés étrangères avec comportements de suppression définis
- Contraintes de check sur certains champs (ex: `status` dans `items`)

### Stratégies de Suppression
- `ON DELETE SET NULL` pour les relations optionnelles
- `ON DELETE CASCADE` pour les relations obligatoires
- Soft delete privilégié pour préserver l'historique

### Fonctions Trigram
- Fonctions avancées de similarité textuelle
- Utilisées pour la recherche approximative et l'indexation
- Support de comparaisons textuelles complexes

### Synchronisation et Audit
- Tracking automatique des mouvements d'items
- Log complet des opérations pour chaque entité
- Synchronisation potentielle avec services externes (Algolia)

### Gestion des Images
- Nettoyage automatique des images non référencées
- Support des images originales et thumbnails
- Stockage dans un bucket dédié

Cette règle Cursor contient désormais l'INTÉGRALITÉ du schéma Supabase, sans aucune omission.
