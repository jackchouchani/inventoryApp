---
description: 
globs: 
alwaysApply: true
---
# Architecture Permissions & PWA - R√®gles Obligatoires

## R√®gles Fondamentales

### Hooks Unifi√©s OBLIGATOIRES

**TOUJOURS utiliser ces 3 hooks uniquement pour les permissions/PWA :**

1. **`useCameraPermissions`** - Pour toute utilisation de cam√©ra (scanner, photos)
2. **`usePWALifecycle`** - Pour la gestion du cycle de vie PWA iOS  
3. **`checkPhotoPermissions`** - Uniquement pour la galerie photo

### ‚ùå Interdictions Absolues

```typescript
// ‚ùå INTERDIT - Ne jamais cr√©er ces fichiers
src/hooks/useScannerPermissions.ts
src/hooks/usePWAServiceWorker.ts
src/hooks/usePermissions.ts  
src/services/permissions.ts
src/utils/pwaPermissions.ts

// ‚ùå INTERDIT - Ne jamais utiliser expo-permissions (d√©pr√©ci√©)
import * as Permissions from 'expo-permissions';

// ‚ùå INTERDIT - Ne jamais cr√©er de Service Worker manuel
navigator.serviceWorker.register('/sw.js');
```

### ‚úÖ Patterns Obligatoires

#### Scanner/Cam√©ra
```typescript
import { useCameraPermissions } from '../hooks/useCameraPermissions';

const ScannerComponent = () => {
  const permissions = useCameraPermissions({
    enableLogging: __DEV__,
    timeoutMs: 10000,
    maxRetries: 3
  });

  if (permissions.isLoading) return <Loading />;
  if (!permissions.isGranted) return <PermissionRequest onRequest={permissions.requestPermission} />;
  
  return <CameraView />;
};
```

#### PWA Lifecycle App Principal
```typescript
import { usePWAServiceWorker } from '../hooks/usePWALifecycle';

const App = () => {
  const pwa = usePWAServiceWorker({
    onDataRefreshNeeded: () => {
      // Auto-refresh donn√©es critiques apr√®s r√©activation PWA
      store.dispatch(fetchItems());
      store.dispatch(fetchCategories());
      store.dispatch(fetchContainers());
    }
  });
  
  return <AppContent />;
};
```

#### Galerie Photo
```typescript
import { checkPhotoPermissions } from '../utils/permissions';

const handleImagePicker = async () => {
  const hasPermission = await checkPhotoPermissions();
  if (!hasPermission) return;
  
  const result = await ImagePicker.launchImageLibraryAsync({...});
};
```

## Configurations Standard

### Development
```typescript
const permissions = useCameraPermissions({
  enableLogging: true,      // Debug actif
  timeoutMs: 15000,        // Plus de temps pour debug
  maxRetries: 5            // Plus de tentatives
});
```

### Production
```typescript
const permissions = useCameraPermissions({
  enableLogging: false,     // Pas de logs
  timeoutMs: 10000,        // Timeout standard
  maxRetries: 3            // Tentatives limit√©es
});
```

## Fichiers de R√©f√©rence

### ‚úÖ Fichiers Autoris√©s
- `src/hooks/useCameraPermissions.ts` - Hook unifi√© cam√©ra
- `src/hooks/usePWALifecycle.ts` - Hook PWA moderne
- `src/utils/permissions.ts` - Seulement `checkPhotoPermissions`

### üìÑ Documentation Compl√®te
- `docs/PERMISSIONS_PWA_ARCHITECTURE.md` - Guide architectural complet

## Probl√®mes Typiques & Solutions

### Scanner Bloqu√© "Initialisation"
```typescript
const permissions = useCameraPermissions({
  timeoutMs: 8000,          // R√©duire timeout
  maxRetries: 2,            // Moins de tentatives
  enableLogging: true       // Debug actif
});
```

### Permissions Redemand√©es
```typescript
// V√©rifier la persistance
const permissions = useCameraPermissions({
  persistenceKey: '@app:camera_permission_v2'  // Cl√© correcte
});
```

### PWA iOS Bloqu√©e apr√®s Inactivit√©
```typescript
const pwa = usePWAServiceWorker({
  inactivityThreshold: 20000,    // R√©duire seuil
  enableAutoRefresh: true,
  onDataRefreshNeeded: refreshCriticalData
});
```

## Migration depuis Ancien Code

### Pattern de Remplacement
```typescript
// ‚ùå ANCIEN
const [permission, requestPermission] = useCameraPermissions();

// ‚úÖ NOUVEAU
const permissions = useCameraPermissions();
// Utiliser: permissions.isGranted, permissions.requestPermission()
```