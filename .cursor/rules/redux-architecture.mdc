---
description: 
globs: 
alwaysApply: true
---
# Architecture Redux Pure - R√®gles Obligatoires ‚úÖ MIGRATION COMPL√àTE

## üéØ Statut de Migration (Mise √† jour D√©cembre 2024)

### ‚úÖ **MIGRATION REDUX TERMIN√âE AVEC SUCC√àS**
- **Aucune r√©f√©rence React Query** restante dans le codebase
- **Architecture Redux pure** pour toutes les entit√©s principales
- **Bug de synchronisation articles vendus/restock√©s R√âSOLU**
- **Pattern d'invalidation coh√©rent** √©tabli dans toute l'application

### üìÅ **Fichiers Migr√©s avec Succ√®s**
- ‚úÖ `app/(stack)/multi-receipt.tsx` - React Query compl√®tement supprim√©
- ‚úÖ `app/(stack)/containers.tsx` - `useQueryClient` supprim√©, remplac√© par `dispatch(fetchItems())`
- ‚úÖ `src/components/ItemEditForm.tsx` - Gestion √©tat query complexe supprim√©e
- ‚úÖ `src/components/ItemForm.tsx` - `useMutation` remplac√©e par fonction directe
- ‚úÖ `src/hooks/useStats.ts` - Migr√© vers hooks Redux (`useItems`, `useCategories`)
- ‚úÖ `app/(stack)/labels.tsx` - Imports React Query nettoy√©s

### üîç **V√©rification Technique**
```bash
# V√©rification aucune r√©f√©rence React Query (‚úÖ Valid√©)
grep -r "useQuery\|useMutation\|useQueryClient\|@tanstack/react-query" --include="*.ts" --include="*.tsx" .
# R√©sultat: 0 match trouv√©
```

## Gestion d'√âtat - Entit√©s Principales

**TOUJOURS utiliser Redux pour les entit√©s principales, JAMAIS React Query :**

### Entit√©s Concern√©es
- **Items** : Utiliser Redux store + thunks SEULEMENT
- **Categories** : Utiliser Redux store + slice SEULEMENT  
- **Containers** : Utiliser Redux store + slice SEULEMENT

### Hooks Redux Obligatoires
```typescript
// ‚úÖ CORRECT - Utiliser ces hooks Redux
import { useItems } from '../../src/hooks/useItems';
import { useCategories } from '../../src/hooks/useCategories'; 
import { useContainers } from '../../src/hooks/useContainers';
import { useItem } from '../../src/hooks/useItem'; // Pour un item sp√©cifique

// ‚ùå INTERDIT - Ne jamais utiliser React Query pour ces entit√©s
import { useQuery } from '@tanstack/react-query';
```

### Thunks Redux Disponibles
- `fetchItems` - R√©cup√©ration pagin√©e des items
- `fetchItemById` - R√©cup√©ration d'un item sp√©cifique
- `updateItemStatus` - Mise √† jour du statut (sold/available)
- R√©f√©rence : [src/store/itemsThunks.ts](mdc:src/store/itemsThunks.ts)

## Format des Donn√©es - Conversion Obligatoire

### R√®gle de Mapping
- **Base de donn√©es** : snake_case (`purchase_price`, `selling_price`, `container_id`, `category_id`)
- **Redux/Frontend** : camelCase (`purchasePrice`, `sellingPrice`, `containerId`, `categoryId`)

### Pattern d'Adaptation Required
```typescript
// ‚úÖ PATTERN OBLIGATOIRE pour les composants recevant des donn√©es DB
const adaptedItem = useMemo(() => ({
  ...item,
  purchasePrice: item.purchase_price || 0,
  sellingPrice: item.selling_price || 0,
  containerId: item.container_id,
  categoryId: item.category_id,
  photoStorageUrl: item.photo_storage_url,
  createdAt: item.created_at,
  updatedAt: item.updated_at,
  soldAt: item.sold_at,
  createdBy: item.created_by,
  userId: item.user_id
}), [item]);
```

## Navigation - Routes D√©di√©es

### Structure de Routes Obligatoire
```
app/
  item/
    _layout.tsx          # Navigation principale
    [id]/
      _layout.tsx        # Layout avec header navigation
      info.tsx          # Page d'informations d√©taill√©es
      edit.tsx          # Page d'√©dition
```

### Redirection au lieu de Modals
```typescript
// ‚úÖ CORRECT - Utiliser la navigation
router.push(`/item/${item.id}/edit`);
router.push(`/item/${item.id}/info`);

// ‚ùå √âVITER - Plus de modals pour edit/info
setShowEditModal(true);
```

## Synchronisation d'√âtat

### R√®gles de Mutation
- **Toutes les mutations** DOIVENT passer par Redux thunks
- **Invalidation automatique** via Redux, pas de `window.location.reload()`
- **√âtat global synchronis√©** sur tous les composants

### Pattern de Mise √† Jour ‚úÖ CONFIRM√â
```typescript
// ‚úÖ CORRECT - Mutation via Redux (Pattern valid√© dans migration)
const dispatch = useDispatch<AppDispatch>();
await dispatch(updateItemStatus({ itemId, status }));

// ‚úÖ INVALIDATION REDUX - Remplace queryClient.invalidateQueries()
await dispatch(fetchItems({ page: 0, limit: 1000 }));

// ‚ùå INTERDIT - Mutations directes Supabase dans composants
await database.updateItem(itemId, data);

// ‚ùå INTERDIT - Invalidation React Query (supprim√© de toute l'app)
queryClient.invalidateQueries({ queryKey: ['items'] });
```

## √âviter les Conflits de Cache ‚úÖ R√âSOLU

### Probl√®mes R√âSOLUS par la Migration
- ‚úÖ **Fin du m√©lange React Query + Redux** pour m√™me entit√©
- ‚úÖ **Fin des items mis √† jour via Redux mais lus via React Query**
- ‚úÖ **Fin du cache d√©synchronis√©** entre sources de donn√©es
- ‚úÖ **Bug articles vendus/restock√©s CORRIG√â**

### Solutions Impl√©ment√©es ‚úÖ CONFIRM√âES
- ‚úÖ **Migration compl√®te vers Redux** pour entit√©s principales
- ‚úÖ **Hooks Redux uniformes** dans toute l'application
- ‚úÖ **Invalidation coh√©rente** via store Redux uniquement
- ‚úÖ **Pattern dispatch unique** : `dispatch(fetchItems())` au lieu de `queryClient.invalidateQueries()`

## Composants - Bonnes Pratiques ‚úÖ VALID√âES

### Adaptation des Donn√©es dans les Composants
R√©f√©rence d'impl√©mentation : [app/item/[id]/edit.tsx](mdc:app/item/[id]/edit.tsx)

```typescript
// ‚úÖ Pattern adapt√© pour √©viter les re-renders infinis (valid√© dans migration)
const adaptedItem = useMemo(() => ({
  // mapping snake_case vers camelCase
}), [item]);

// Utiliser adaptedItem dans le composant, pas item directement
```

### Gestion d'Erreurs
```typescript
// ‚úÖ Protection contre propri√©t√©s undefined
const displayPrice = (salePrice || 0).toString();
const categoryName = category?.name || 'Non sp√©cifi√©e';
```

### TypeScript Dispatch Pattern ‚úÖ CONFIRM√â
```typescript
// ‚úÖ OBLIGATOIRE - Typage dispatch correct (valid√© dans migration)
import { useDispatch } from 'react-redux';
import { AppDispatch } from '../../src/store/store';

const dispatch = useDispatch<AppDispatch>();
```

## Fichiers de R√©f√©rence ‚úÖ VALID√âS

### Hooks Redux
- [src/hooks/useItems.ts](mdc:src/hooks/useItems.ts) ‚úÖ Valid√©
- [src/hooks/useCategories.ts](mdc:src/hooks/useCategories.ts) ‚úÖ Valid√©
- [src/hooks/useContainers.ts](mdc:src/hooks/useContainers.ts) ‚úÖ Valid√©
- [src/hooks/useItem.ts](mdc:src/hooks/useItem.ts) ‚úÖ Valid√©

### Store Redux
- [src/store/itemsThunks.ts](mdc:src/store/itemsThunks.ts) ‚úÖ Valid√©
- [src/store/itemsSlice.ts](mdc:src/store/itemsSlice.ts) ‚úÖ Valid√©
- [src/store/categorySlice.ts](mdc:src/store/categorySlice.ts) ‚úÖ Valid√©
- [src/store/containersSlice.ts](mdc:src/store/containersSlice.ts) ‚úÖ Valid√©

### Pages Mod√®les ‚úÖ MIGR√âES
- [app/item/[id]/info.tsx](mdc:app/item/[id]/info.tsx) ‚úÖ Migr√©
- [app/item/[id]/edit.tsx](mdc:app/item/[id]/edit.tsx) ‚úÖ Migr√©
- [app/(tabs)/add.tsx](mdc:app/(tabs)/add.tsx) ‚úÖ Valid√©

## Exemples d'Usage Correct ‚úÖ CONFIRM√âS

### Chargement d'Items
```typescript
const { data: items, isLoading, error } = useItems();
// ‚úÖ Valid√© - Pas useQuery pour les items
```

### R√©cup√©ration Item Sp√©cifique
```typescript
const { item, isLoading } = useItem(itemId);
// ‚úÖ Valid√© - Utilise Redux thunk fetchItemById
```

### Mise √† Jour de Statut
```typescript
await dispatch(updateItemStatus({ 
  itemId: item.id.toString(), 
  status: 'sold',
  soldDate: new Date().toISOString(),
  salePrice: 100
}));
// ‚úÖ Valid√© - Pattern utilis√© dans migration
```

## üö´ Patterns INTERDITS (Supprim√©s avec Succ√®s)

### ‚ùå React Query pour Entit√©s Principales
```typescript
// ‚ùå SUPPRIM√â de toute l'application
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
const { data: items } = useQuery(['items'], fetchItems);
const mutation = useMutation(updateItem);
queryClient.invalidateQueries(['items']);
```

### ‚ùå M√©lange React Query + Redux
```typescript
// ‚ùå PROBL√àME R√âSOLU - Plus de conflit cache
const { data: items } = useQuery(['items']); // Lecture React Query
await dispatch(updateItem()); // Mutation Redux
// ‚Üë Ce pattern causait le bug de synchronisation articles vendus/restock√©s
```

## üìä R√©sultats de la Migration

### M√©triques de Succ√®s
- **0 r√©f√©rence React Query** dans le codebase
- **6 fichiers migr√©s** avec succ√®s
- **1 bug critique r√©solu** (articles vendus/restock√©s)
- **100% architecture Redux** pour entit√©s principales
- **Pattern d'invalidation uniforme** √©tabli

### V√©rification Continue
```bash
# Commande de v√©rification √† ex√©cuter r√©guli√®rement
npx tsc --noEmit --skipLibCheck | grep -i "react-query\|@tanstack"
# R√©sultat attendu: aucune erreur React Query
```

Cette architecture Redux pure garantit une synchronisation coh√©rente et **√©limine d√©finitivement** les conflits de cache entre React Query et Redux.

# Architecture Redux - Acc√®s aux Donn√©es

## Principe Fondamental

**JAMAIS d'acc√®s direct √† `database` dans les composants ou hooks.**

Toutes les op√©rations de donn√©es DOIVENT passer par Redux thunks et hooks optimis√©s.

## Hooks Obligatoires

### Pour les Items
```typescript
// ‚úÖ CORRECT - Utiliser les hooks optimis√©s
import { useStockPageData, useFilteredItems } from '../../src/hooks/useOptimizedSelectors';

const { items, categories, containers, isLoading } = useStockPageData(filters);
```

### Pour les Categories
```typescript
// ‚úÖ CORRECT - Hook optimis√© Redux
import { useCategoriesOptimized as useCategories } from '../../src/hooks/useCategoriesOptimized';

const { categories, isLoading, error, create, update, delete } = useCategories();
```

### Pour les Containers
```typescript
// ‚úÖ CORRECT - Hook optimis√© Redux
import { useContainersOptimized as useContainers } from '../../src/hooks/useContainersOptimized';

const { containers, isLoading, error, create, update, delete } = useContainers();
```

## Thunks Redux Disponibles

### Items - [src/store/itemsThunks.ts](mdc:src/store/itemsThunks.ts)
```typescript
import { createItem, updateItem, deleteItem, fetchItems, updateItemStatus } from '../store/itemsThunks';

// Cr√©er un item
await dispatch(createItem({
  name: 'Item Name',
  description: 'Description',
  purchasePrice: 100,
  sellingPrice: 150,
  categoryId: 1,
  containerId: 2,
  qrCode: 'ITEM123'
})).unwrap();

// Mettre √† jour un item
await dispatch(updateItem({
  id: itemId,
  updates: { name: 'Nouveau nom', sellingPrice: 200 }
})).unwrap();

// Supprimer un item
await dispatch(deleteItem(itemId)).unwrap();
```

### Categories - [src/store/categoriesThunks.ts](mdc:src/store/categoriesThunks.ts)
```typescript
import { createCategory, updateCategory, deleteCategory, fetchCategories } from '../store/categoriesThunks';

// Cr√©er une cat√©gorie
await dispatch(createCategory({
  name: 'Nouvelle Cat√©gorie',
  description: 'Description',
  icon: 'folder'
})).unwrap();
```

### Containers - [src/store/containersThunks.ts](mdc:src/store/containersThunks.ts)
```typescript
import { createContainer, updateContainer, deleteContainer, fetchContainers } from '../store/containersThunks';

// Cr√©er un container
await dispatch(createContainer({
  name: 'Container Name',
  description: 'Description',
  number: 1
})).unwrap();
```

## Patterns Obligatoires

### Pattern Dispatch TypeScript
```typescript
import { useDispatch } from 'react-redux';
import { AppDispatch } from '../store/store';

const Component = () => {
  const dispatch = useDispatch<AppDispatch>();
  
  const handleSubmit = async () => {
    try {
      await dispatch(createItem(itemData)).unwrap();
      // Succ√®s
    } catch (error) {
      // Gestion d'erreur
    }
  };
};
```

### Pattern Hook Optimis√©
```typescript
// ‚úÖ CORRECT - Une seule r√©cup√©ration de donn√©es
const { items, categories, containers, isLoading } = useStockPageData(filters);

// ‚ùå √âVITER - Multiples hooks s√©par√©s
const items = useItems();
const categories = useCategories(); 
const containers = useContainers();
```

## Interdictions Absolues

### ‚ùå Import Database Direct
```typescript
// ‚ùå INTERDIT - Acc√®s direct database
import { database } from '../database/database';
await database.addItem(itemData);

// ‚úÖ CORRECT - Redux thunk
import { createItem } from '../store/itemsThunks';
await dispatch(createItem(itemData)).unwrap();
```

### ‚ùå Hooks D√©pr√©ci√©s
```typescript
// ‚ùå √âVITER - Hooks d√©pr√©ci√©s
import { useCategories } from './useCategories';
import { useContainers } from './useContainers';

// ‚úÖ UTILISER - Hooks optimis√©s
import { useCategoriesOptimized as useCategories } from './useCategoriesOptimized';
import { useContainersOptimized as useContainers } from './useContainersOptimized';
```

## Services Autoris√©s

### Exception : Services Sp√©cialis√©s
Seuls les services suivants peuvent acc√©der directement √† `database` :
- [src/services/imageService.ts](mdc:src/services/imageService.ts) - Gestion images R2
- [src/database/](mdc:src/database) - Couche d'abstraction base de donn√©es

## Exemple Complet

### Composant avec Architecture Correcte
```typescript
import React, { useCallback } from 'react';
import { useDispatch } from 'react-redux';
import { AppDispatch } from '../store/store';
import { useStockPageData } from '../hooks/useOptimizedSelectors';
import { updateItemStatus } from '../store/itemsThunks';

const ItemList = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { items, isLoading } = useStockPageData({});

  const handleMarkAsSold = useCallback(async (itemId: number) => {
    try {
      await dispatch(updateItemStatus({ 
        itemId, 
        status: 'sold',
        soldDate: new Date().toISOString()
      })).unwrap();
    } catch (error) {
      console.error('Erreur:', error);
    }
  }, [dispatch]);

  if (isLoading) return <Loading />;

  return (
    <div>
      {items.map(item => (
        <ItemCard 
          key={item.id} 
          item={item} 
          onMarkAsSold={() => handleMarkAsSold(item.id)}
        />
      ))}
    </div>
  );
};
```

## R√©sum√©

1. **Utiliser hooks optimis√©s** : `useStockPageData`, `useCategoriesOptimized`, `useContainersOptimized`
2. **Utiliser Redux thunks** pour toutes les mutations
3. **Typer dispatch** avec `AppDispatch`
4. **√âviter database direct** dans composants/hooks
5. **Suivre pattern .unwrap()** pour gestion d'erreurs
