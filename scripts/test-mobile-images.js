#!/usr/bin/env node

/**
 * Script pour tester les corrections d'images sur mobile web
 */

const fs = require('fs');
const path = require('path');

console.log('üñºÔ∏è  Test des corrections d\'images mobile web...\n');

// V√©rifier ItemEditForm.tsx
const itemEditFormPath = path.join(process.cwd(), 'src', 'components', 'ItemEditForm.tsx');
if (fs.existsSync(itemEditFormPath)) {
    const content = fs.readFileSync(itemEditFormPath, 'utf8');
    
    console.log('üìù V√©rification ItemEditForm.tsx:');
    
    if (content.includes('Platform.OS === \'web\'') && content.includes('selectedAsset.base64')) {
        console.log('‚úÖ Logique web base64 ajout√©e');
    } else {
        console.log('‚ùå Logique web base64 manquante');
    }
    
    if (content.includes('data:${mimeType};base64,${selectedAsset.base64}')) {
        console.log('‚úÖ Conversion base64 URI correcte');
    } else {
        console.log('‚ùå Conversion base64 URI manquante');
    }
    
    if (content.includes('selectedUri = base64Uri')) {
        console.log('‚úÖ Attribution URI base64 correcte');
    } else {
        console.log('‚ùå Attribution URI base64 manquante');
    }
} else {
    console.log('‚ùå ItemEditForm.tsx non trouv√©');
}

// V√©rifier ItemForm.tsx
const itemFormPath = path.join(process.cwd(), 'src', 'components', 'ItemForm.tsx');
if (fs.existsSync(itemFormPath)) {
    const content = fs.readFileSync(itemFormPath, 'utf8');
    
    console.log('\nüìù V√©rification ItemForm.tsx:');
    
    if (content.includes('let photoStorageUrl = undefined')) {
        console.log('‚úÖ Initialisation photoStorageUrl corrig√©e');
    } else {
        console.log('‚ùå Initialisation photoStorageUrl incorrecte');
    }
    
    if (content.includes('localImage && localImage.needsUpload')) {
        console.log('‚úÖ Condition upload localImage correcte');
    } else {
        console.log('‚ùå Condition upload localImage manquante');
    }
    
    if (content.includes('Platform.OS === \'web\'') && content.includes('selectedAsset.base64')) {
        console.log('‚úÖ Logique web base64 pr√©sente');
    } else {
        console.log('‚ùå Logique web base64 manquante');
    }
} else {
    console.log('‚ùå ItemForm.tsx non trouv√©');
}

// V√©rifier AdaptiveImage.tsx
const adaptiveImagePath = path.join(process.cwd(), 'src', 'components', 'AdaptiveImage.tsx');
if (fs.existsSync(adaptiveImagePath)) {
    const content = fs.readFileSync(adaptiveImagePath, 'utf8');
    
    console.log('\nüìù V√©rification AdaptiveImage.tsx:');
    
    if (content.includes('data:image/')) {
        console.log('‚úÖ Support base64 URI pr√©sent');
    } else {
        console.log('‚ùå Support base64 URI manquant');
    }
    
    if (content.includes('isLocalImage')) {
        console.log('‚úÖ D√©tection image locale pr√©sente');
    } else {
        console.log('‚ùå D√©tection image locale manquante');
    }
} else {
    console.log('‚ùå AdaptiveImage.tsx non trouv√©');
}

console.log('\nüß™ Tests recommand√©s:');
console.log('1. Testez sur navigateur mobile (Chrome/Safari mobile)');
console.log('2. S√©lectionnez une image dans ItemForm');
console.log('3. V√©rifiez l\'aper√ßu de l\'image');
console.log('4. Sauvegardez et v√©rifiez que l\'image est upload√©e');
console.log('5. Testez l\'√©dition d\'un article avec image');

console.log('\nüì± Navigateurs √† tester:');
console.log('- Chrome mobile (Android)');
console.log('- Safari mobile (iOS)');
console.log('- Firefox mobile');
console.log('- Samsung Internet');

console.log('\nüîç Points de d√©bogage:');
console.log('- Ouvrez les DevTools mobile');
console.log('- V√©rifiez les logs console pour "Image convertie en base64"');
console.log('- V√©rifiez les logs d\'upload R2');
console.log('- Testez avec diff√©rentes tailles d\'images');

console.log('\n‚úÖ Test des corrections termin√©!'); 