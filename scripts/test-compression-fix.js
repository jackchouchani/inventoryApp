#!/usr/bin/env node

/**
 * Script pour tester le fix de compression d'images
 */

const fs = require('fs');
const path = require('path');

console.log('üîß Test du fix de compression d\'images...\n');

// V√©rifier usePhoto.ts
const usePhotoPath = path.join(process.cwd(), 'src', 'hooks', 'usePhoto.ts');
if (fs.existsSync(usePhotoPath)) {
    const content = fs.readFileSync(usePhotoPath, 'utf8');
    
    console.log('üìù V√©rification src/hooks/usePhoto.ts:');
    
    if (content.includes('COMPRESSION D\'ABORD - avant la validation')) {
        console.log('‚úÖ Compression avant validation');
    } else {
        console.log('‚ùå Compression pas avant validation');
    }
    
    if (content.includes('VALIDATION APR√àS COMPRESSION - et non-bloquante')) {
        console.log('‚úÖ Validation non-bloquante apr√®s compression');
    } else {
        console.log('‚ùå Validation pas non-bloquante');
    }
    
    if (content.includes('mais on continue l\'upload')) {
        console.log('‚úÖ Upload continue m√™me si validation √©choue');
    } else {
        console.log('‚ùå Upload peut √™tre bloqu√© par validation');
    }
} else {
    console.log('‚ùå usePhoto.ts non trouv√©');
}

// V√©rifier imageCompression.ts
const imageCompressionPath = path.join(process.cwd(), 'src', 'utils', 'imageCompression.ts');
if (fs.existsSync(imageCompressionPath)) {
    const content = fs.readFileSync(imageCompressionPath, 'utf8');
    
    console.log('\nüìù V√©rification src/utils/imageCompression.ts:');
    
    if (content.includes('PHOTO_COMPRESSION_OPTIONS')) {
        console.log('‚úÖ Utilise les nouvelles constantes de compression');
    } else {
        console.log('‚ùå N\'utilise pas les nouvelles constantes');
    }
    
    if (content.includes('quality = 0.3')) {
        console.log('‚úÖ Compression maximale disponible (0.3)');
    } else {
        console.log('‚ùå Compression maximale non disponible');
    }
    
    if (content.includes('maxDimension = PHOTO_COMPRESSION_OPTIONS.maxWidth')) {
        console.log('‚úÖ Taille maximale mise √† jour (800px)');
    } else {
        console.log('‚ùå Taille maximale pas mise √† jour');
    }
} else {
    console.log('‚ùå imageCompression.ts non trouv√©');
}

console.log('\nüìä Workflow de compression corrig√©:');
console.log('1. Image s√©lectionn√©e (ex: 1.42MB)');
console.log('2. üîÑ COMPRESSION D\'ABORD');
console.log('   - Redimensionnement: 800x800 max');
console.log('   - Qualit√©: 0.3-0.6 selon taille');
console.log('   - R√©sultat attendu: ~300-600KB');
console.log('3. ‚úÖ VALIDATION APR√àS (non-bloquante)');
console.log('4. üì§ UPLOAD vers R2');

console.log('\nüß™ Tests recommand√©s:');
console.log('1. Red√©marrez l\'app: npm run web');
console.log('2. Testez avec une photo haute r√©solution');
console.log('3. V√©rifiez les logs de compression');
console.log('4. V√©rifiez que l\'upload r√©ussit');

console.log('\nüì± Logs attendus (succ√®s):');
console.log('- "Compression de l\'image avant validation..."');
console.log('- "Compression termin√©e, validation de l\'image compress√©e..."');
console.log('- "Canvas: compression avec qualit√© XX%"');
console.log('- "Taille r√©duite: XXXXkB ‚Üí XXXkB"');
console.log('- "Upload de l\'image vers R2: item_photo_xxx.jpg"');
console.log('- "Upload R2 termin√©"');

console.log('\n‚úÖ Test du fix de compression termin√©!'); 