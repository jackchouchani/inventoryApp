#!/usr/bin/env node

/**
 * Script pour tester les configurations de compression d'images
 */

const fs = require('fs');
const path = require('path');

console.log('üñºÔ∏è  Test des configurations de compression d\'images...\n');

// V√©rifier les constantes de photos
const photosConstantsPath = path.join(process.cwd(), 'src', 'constants', 'photos.ts');
if (fs.existsSync(photosConstantsPath)) {
    const content = fs.readFileSync(photosConstantsPath, 'utf8');
    
    console.log('üìù V√©rification src/constants/photos.ts:');
    
    if (content.includes('maxWidth: 800') && content.includes('maxHeight: 800')) {
        console.log('‚úÖ Taille par d√©faut r√©duite (800x800)');
    } else {
        console.log('‚ùå Taille par d√©faut non r√©duite');
    }
    
    if (content.includes('quality: 0.6')) {
        console.log('‚úÖ Qualit√© par d√©faut r√©duite (0.6)');
    } else {
        console.log('‚ùå Qualit√© par d√©faut non r√©duite');
    }
    
    if (content.includes('quality: 0.3')) {
        console.log('‚úÖ Compression maximale disponible (0.3)');
    } else {
        console.log('‚ùå Compression maximale non disponible');
    }
} else {
    console.log('‚ùå photos.ts non trouv√©');
}

// V√©rifier ItemEditForm.tsx
const itemEditFormPath = path.join(process.cwd(), 'src', 'components', 'ItemEditForm.tsx');
if (fs.existsSync(itemEditFormPath)) {
    const content = fs.readFileSync(itemEditFormPath, 'utf8');
    
    console.log('\nüìù V√©rification ItemEditForm.tsx:');
    
    if (content.includes('quality: 0.3')) {
        console.log('‚úÖ Compression forte activ√©e (0.3)');
    } else {
        console.log('‚ùå Compression forte non activ√©e');
    }
    
    if (content.includes('Validation ignor√©e')) {
        console.log('‚úÖ Validation photo non-bloquante');
    } else {
        console.log('‚ùå Validation photo peut encore bloquer');
    }
} else {
    console.log('‚ùå ItemEditForm.tsx non trouv√©');
}

// V√©rifier ItemForm.tsx
const itemFormPath = path.join(process.cwd(), 'src', 'components', 'ItemForm.tsx');
if (fs.existsSync(itemFormPath)) {
    const content = fs.readFileSync(itemFormPath, 'utf8');
    
    console.log('\nüìù V√©rification ItemForm.tsx:');
    
    if (content.includes('quality: 0.3')) {
        console.log('‚úÖ Compression forte activ√©e (0.3)');
    } else {
        console.log('‚ùå Compression forte non activ√©e');
    }
} else {
    console.log('‚ùå ItemForm.tsx non trouv√©');
}

console.log('\nüìä Estimation des tailles d\'images:');
console.log('- Photo iPhone 12MP ‚Üí ~3-4MB original');
console.log('- Avec quality: 0.7 ‚Üí ~1.5-2MB (trop gros)');
console.log('- Avec quality: 0.5 ‚Üí ~1-1.5MB (limite)');
console.log('- Avec quality: 0.3 ‚Üí ~500KB-800KB (optimal)');

console.log('\nüß™ Tests recommand√©s:');
console.log('1. Red√©marrez l\'app: npm run web');
console.log('2. Testez avec une photo haute r√©solution');
console.log('3. V√©rifiez que l\'aper√ßu s\'affiche');
console.log('4. V√©rifiez que l\'upload r√©ussit');
console.log('5. V√©rifiez les logs de compression');

console.log('\nüì± Logs attendus (succ√®s):');
console.log('- "Image convertie en base64 pour le web"');
console.log('- "Validation ignor√©e, passage direct √† la mise √† jour des √©tats"');
console.log('- "√âtats mis √† jour avec succ√®s"');
console.log('- "Upload R2 r√©ussi"');

console.log('\n‚úÖ Test de compression termin√©!'); 