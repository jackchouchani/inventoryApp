-- Désactiver les triggers existants
ALTER TABLE items DISABLE TRIGGER items_audit;
ALTER TABLE containers DISABLE TRIGGER containers_audit;
ALTER TABLE categories DISABLE TRIGGER categories_audit;

-- Supprimer tous les objets liés à l'audit
DROP TRIGGER IF EXISTS items_audit ON items;
DROP TRIGGER IF EXISTS containers_audit ON containers;
DROP TRIGGER IF EXISTS categories_audit ON categories;
DROP FUNCTION IF EXISTS audit_trigger_function() CASCADE;
DROP FUNCTION IF EXISTS cleanup_audit_logs() CASCADE;

-- Supprimer la table d'audit existante
DROP TABLE IF EXISTS audit_logs CASCADE;

-- Créer la nouvelle table d'audit
CREATE TABLE audit_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    table_name TEXT NOT NULL,
    operation TEXT NOT NULL,
    record_id BIGINT NOT NULL,
    changes JSONB NOT NULL,
    user_id UUID REFERENCES auth.users(id),
    created_at TIMESTAMPTZ DEFAULT now()
);

-- Créer les index essentiels
CREATE INDEX idx_audit_logs_table_record ON audit_logs(table_name, record_id);
CREATE INDEX idx_audit_logs_created_at ON audit_logs(created_at DESC);

-- Créer la fonction trigger d'audit
CREATE OR REPLACE FUNCTION audit_trigger_function()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO audit_logs (
        table_name,
        operation,
        record_id,
        changes,
        user_id,
        created_at
    ) VALUES (
        TG_TABLE_NAME,
        TG_OP,
        CASE
            WHEN TG_OP = 'DELETE' THEN OLD.id
            ELSE NEW.id
        END,
        jsonb_build_object(
            'old_data', CASE
                WHEN TG_OP = 'DELETE' THEN row_to_json(OLD)::jsonb
                WHEN TG_OP = 'UPDATE' THEN row_to_json(OLD)::jsonb
                ELSE NULL
            END,
            'new_data', CASE
                WHEN TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN row_to_json(NEW)::jsonb
                ELSE NULL
            END
        ),
        auth.uid(),
        CURRENT_TIMESTAMP
    );
    RETURN NULL;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Créer les triggers
CREATE TRIGGER items_audit
    AFTER INSERT OR UPDATE OR DELETE ON items
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER containers_audit
    AFTER INSERT OR UPDATE OR DELETE ON containers
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER categories_audit
    AFTER INSERT OR UPDATE OR DELETE ON categories
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

-- Créer la fonction de nettoyage
CREATE OR REPLACE FUNCTION cleanup_audit_logs() RETURNS void AS $$
BEGIN
    DELETE FROM audit_logs
    WHERE created_at < (CURRENT_DATE - INTERVAL '30 days');
END;
$$ LANGUAGE plpgsql;

-- Planifier le nettoyage quotidien
SELECT cron.schedule(
    'cleanup_audit_logs_daily',
    '0 0 * * *',
    $$SELECT cleanup_audit_logs()$$
); 